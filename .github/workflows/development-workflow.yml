name: DevelopmentCI

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  SHORT_SHA_12: $(git rev-parse --short=12 ${{ github.sha }})

jobs:
  jvm-build-job:
    runs-on: ubuntu-latest
    steps:
      # Clone git project
      - name: 'Clone Git Project'
        uses: actions/checkout@v2

      # Set up JDK 11
      - name: 'Set up JDK 11'
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Build and test the application
      - name: 'Build & Test'
        run: mvn clean package

      # Setup up Google Cloud SDK
      - name: 'Set up Google Cloud SDK'
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS }}
          export_default_credentials: true

      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: 'Configure Docker Credentials'
        run: |
          gcloud --quiet auth configure-docker

      # Move Dockerfile with JVM Runtime to the projects root directory
      - name: 'Copy Dockerfile with JVM Runtime'
        run: cp ./src/main/docker/Dockerfile.jvm ./Dockerfile

      # Build & publish the container image with Google Cloud Build
      - name: 'Build & publish Docker Image'
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/quarkus-petclinic-rest-jvm:${{ env.SHORT_SHA_12 }}-SNAPSHOT
          gcloud config set run/region europe-west1

      # Deploy the Docker image to Google Cloud Run
      - name: 'Deploy to Cloud Run'
        run: |
          gcloud run deploy quarkus-petclinic-rest-jvm-dev --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/quarkus-petclinic-rest-jvm:${{ env.SHORT_SHA_12 }}-SNAPSHOT \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars "DB_USERNAME=${{ secrets.GCP_DB_USERNAME }}" \
          --set-env-vars "DB_PASSWORD=${{ secrets.GCP_DB_PASSWORD }}" \
          --set-env-vars "DB_HOST=${{ secrets.GCP_DB_HOST }}" \
          --set-env-vars "DB_PORT=${{ secrets.GCP_DB_PORT }}" \
          --set-env-vars "DB_DATABASE=${{ secrets.GCP_DB_DATABASE }}" \
          --memory 512M

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Get GKE Credentials'
        uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_ZONE }}
          credentials: ${{ secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS }}

      # Set up Kustomize
      - name: 'Set up Kustomize'
        run: |-
          curl --location https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v4.0.1/kustomize_v4.0.1_linux_amd64.tar.gz | tar -xz
          chmod u+x ./kustomize

      # Deploy to GKE cluster
      - name: 'Deploy to GKE Cluster'
        run: |
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/${{ secrets.GCP_PROJECT_ID }}/quarkus-petclinic-rest-jvm:${{ env.SHORT_SHA_12 }}-SNAPSHOT
          ./kustomize edit set namespace petclinic-jvm-knative-dev
          ./kustomize edit add secret quarkus-petclinic-rest-credentials --from-literal=db-host=${{ secrets.GCP_DB_HOST }}
          ./kustomize edit add secret quarkus-petclinic-rest-credentials --from-literal=db-port=${{ secrets.GCP_DB_PORT }}
          ./kustomize edit add secret quarkus-petclinic-rest-credentials --from-literal=db-database=${{ secrets.GCP_DB_DATABASE }}
          ./kustomize edit add secret quarkus-petclinic-rest-credentials --from-literal=db-username=${{ secrets.GCP_DB_USERNAME }}
          ./kustomize edit add secret quarkus-petclinic-rest-credentials --from-literal=db-password=${{ secrets.GCP_DB_PASSWORD }}
          ./kustomize build . | kubectl apply -f -

  native-image-build-job:
    runs-on: ubuntu-latest
    steps:
      # Clone git project
      - uses: actions/checkout@v2

      # Set up GraalVM 20.3.1 with Java 11
      - name: 'Setup GraalVM Environment'
        uses: DeLaGuardo/setup-graalvm@master
        with:
          graalvm-version: '20.3.1.java11'

      # Install GraalVM native-image plugin
      - name: 'Install GraalVM Native Image Plugin'
        run: |
          gu install native-image

      # Build and test the application
      - name: 'Build & Test Native Image'
        run: mvn package -Pnative

      # Setup up Google Cloud SDK
      - name: 'Set up Google Cloud SDK'
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS }}
          export_default_credentials: true

      # Configure Docker with Google Cloud Credentials
      - name: 'Configure Docker'
        run: |
          gcloud auth configure-docker

      # Copy Dockerfile for native executables to the projects root directory
      - name: 'Copy Dockerfile for Native Executables'
        run: cp ./src/main/docker/Dockerfile.native ./Dockerfile

      # Build the Docker image
      - name: 'Build & publish Docker Image'
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/quarkus-petclinic-rest-native:${{ env.SHORT_SHA_12 }}-SNAPSHOT
          gcloud config set run/region europe-west1

      # Deploy the Docker image to Google Cloud Run
      - name: 'Deploy to Cloud Run'
        run: |
          gcloud run deploy quarkus-petclinic-rest-native-dev --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/quarkus-petclinic-rest-native:${{ env.SHORT_SHA_12 }}-SNAPSHOT \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars "DB_USERNAME=${{ secrets.GCP_DB_USERNAME }}" \
          --set-env-vars "DB_PASSWORD=${{ secrets.GCP_DB_PASSWORD }}" \
          --set-env-vars "DB_HOST=${{ secrets.GCP_DB_HOST }}" \
          --set-env-vars "DB_PORT=${{ secrets.GCP_DB_PORT }}" \
          --set-env-vars "DB_DATABASE=${{ secrets.GCP_DB_DATABASE }}" \
          --memory 512M

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Get GKE Credentials'
        uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_ZONE }}
          credentials: ${{ secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS }}

      # Set up Kustomize
      - name: 'Set up Kustomize'
        run: |-
          curl --location https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v4.0.1/kustomize_v4.0.1_linux_amd64.tar.gz | tar -xz
          chmod u+x ./kustomize

      # Deploy to GKE cluster
      - name: 'Deploy to GKE Cluster'
        run: |
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/${{ secrets.GCP_PROJECT_ID }}/quarkus-petclinic-rest-jvm:${{ env.SHORT_SHA_12 }}-SNAPSHOT
          ./kustomize edit set namespace petclinic-native-knative-dev
          ./kustomize edit add secret quarkus-petclinic-rest-credentials --from-literal=db-host=${{ secrets.GCP_DB_HOST }}
          ./kustomize edit add secret quarkus-petclinic-rest-credentials --from-literal=db-port=${{ secrets.GCP_DB_PORT }}
          ./kustomize edit add secret quarkus-petclinic-rest-credentials --from-literal=db-database=${{ secrets.GCP_DB_DATABASE }}
          ./kustomize edit add secret quarkus-petclinic-rest-credentials --from-literal=db-username=${{ secrets.GCP_DB_USERNAME }}
          ./kustomize edit add secret quarkus-petclinic-rest-credentials --from-literal=db-password=${{ secrets.GCP_DB_PASSWORD }}
          ./kustomize build . | kubectl apply -f -
